
 
	#define SF 1000

	
	
	#define NO_COST_LIMIT 0

	

	
	[0, 1] time;

	
	[0, 10] Y;
	[0, 10] X;
	[0, 10] B;

	
	[0, 1] lamX2;
	[0, 1] lamY2;
	[0, 1] lamX1;
	[0, 1] lamY1;

	
	[0, 1] c0_0;
	[0, 1] c0_1;
	[0, 1] c0_2;


	
	[0, 1] o0;

	
	 [0.1, 10] k_2;
	 [0.1, 10] k_3;
	 [0.1, 10] k_1;
{mode 1; 
invt: 	
	 
	d/dt[k_2] = 0;
	d/dt[k_3] = 0;
	d/dt[k_1] = 0;

	 
	d/dt[lamX2] = 0;
	d/dt[lamY2] = 0;
	d/dt[lamX1] = 0;
	d/dt[lamY1] = 0;

	 
	d/dt[c0_0] = 0;
	d/dt[c0_1] = 0;
	d/dt[c0_2] = 0;

	 
	d/dt[o0] = 0;


	-- Flows
		d/dt[X]  = SF*(B*X*k_3*o0 + B*X*k_3 + Y*k_1*(-lamX1 + 1)*(X*lamX1 + Y*lamY1) + k_2*(X*lamX2 + Y*lamY2)*(-c0_1 - 2*c0_2 - lamX2)*(X^2*c0_2 + X*c0_1 + c0_0));

		d/dt[B]  = SF*(-B*X*k_3*o0 - B*X*k_3 + Y*k_1*(X*lamX1 + Y*lamY1) + k_2*(X*lamX2 + Y*lamY2)*(X^2*c0_2 + X*c0_1 + c0_0));

		d/dt[Y]  = SF*(Y*k_1*(-lamY1 - 1)*(X*lamX1 + Y*lamY1) + k_2*(-lamY2 + 1)*(X*lamX2 + Y*lamY2)*(X^2*c0_2 + X*c0_1 + c0_0));



jump: 

 }
init:

 @1 (and
	 
	( (or ( (6*c0_1 + 12*c0_2 + 6*lamX1 + 6*lamX2 + 6*lamY1 + 6*lamY2 + 79) <= 100) (NO_COST_LIMIT = 1)))


	
	 ( or ( and (lamX2 = 1)(lamY2 = 0))( and (lamX2 = 0)(lamY2 = 1)))
	 ( or ( and (lamX1 = 1)(lamY1 = 0))( and (lamX1 = 0)(lamY1 = 1)))

	 
	 ( or  ( ( and (c0_0 = 1)(c0_1 = 0)(c0_2 = 0)))   ( ( and (c0_0 = 0)(c0_1 = 1)(c0_2 = 0)))   ( ( and (c0_0 = 0)(c0_1 = 0)(c0_2 = 1))) ) 
	 
	(or (o0 = 0) (o0 = 1))

	 
);

goal: 
	@0 ;

