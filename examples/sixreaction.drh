
 #define MAX_TIME 1
	#define SF 1000

	// declare cost variables
	#define MAX_COST 100
	#define NO_COST_LIMIT 0

	// define derivatives
		#define PThree_dot  (POne*k_3 - PThree*k_4 - PThree*k_5 + PTwo*k_2)
		#define PThree_dot_dot  (k_2*Derivative(PTwo, t) + k_3*Derivative(POne, t) - k_4*Derivative(PThree, t) - k_5*Derivative(PThree, t))

	// declare time variables
	[0, MAX_TIME] time;

	//Define State Variables
	[0, 10] PThree;
	[0, 10] PTwo;
	[0, 10] POne;

	// Rate constants
	 [0, 5] k_4;
	 [0, 5] k_5;
	 [0, 5] k_6;
	 [0, 5] k_1;
	 [0, 5] k_3;
	 [0, 5] k_2;
{ mode 1;

invt: 

	 // invariant conditions during modes
	 PThree_dot >= 0;

flow: 

	 // Rate constants are fixed
	d/dt[k_4] = 0;
	d/dt[k_5] = 0;
	d/dt[k_6] = 0;
	d/dt[k_1] = 0;
	d/dt[k_3] = 0;
	d/dt[k_2] = 0;


	// Flows
		d/dt[PTwo]  = SF*(POne*k_1 + PThree*k_4 - PTwo*k_2 - PTwo*k_6);
		d/dt[PThree]  = SF*(POne*k_3 - PThree*k_4 - PThree*k_5 + PTwo*k_2);
		d/dt[POne]  = SF*(-POne*k_1 - POne*k_3 + PThree*k_5 + PTwo*k_6);


jump: 

	 // jump conditions during modes
PThree_dot >= 0 ==> @1 	 ( and (PThree' = PThree)(PTwo' = PTwo)(POne' = POne)(k_4' = k_4)(k_5' = k_5)(k_6' = k_6)(k_1' = k_1)(k_3' = k_3)(k_2' = k_2));


 }{ mode 2;

invt: 

	 // invariant conditions during modes
	 PThree_dot <= 0;

flow: 

	 // Rate constants are fixed
	d/dt[k_4] = 0;
	d/dt[k_5] = 0;
	d/dt[k_6] = 0;
	d/dt[k_1] = 0;
	d/dt[k_3] = 0;
	d/dt[k_2] = 0;


	// Flows
		d/dt[PTwo]  = SF*(POne*k_1 + PThree*k_4 - PTwo*k_2 - PTwo*k_6);
		d/dt[PThree]  = SF*(POne*k_3 - PThree*k_4 - PThree*k_5 + PTwo*k_2);
		d/dt[POne]  = SF*(-POne*k_1 - POne*k_3 + PThree*k_5 + PTwo*k_6);


jump: 

 }
init:

 @1 (and
	 // cost condition
	( (or ( (75) <= MAX_COST) (NO_COST_LIMIT = 1)))


	 // Limits on initial conditions
	 ( and (PThree <= 5))
	 ( and (PTwo <= 5))
	 ( and (POne <= 5))
);

goal: 
	@2 and ((and (PThree >= 0)(PThree < 0.1)));
