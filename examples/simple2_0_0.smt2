(set-logic QF_NRA_ODE)
(declare-fun k_1 () Real [0.000000, 1.000000])
(declare-fun c1_1 () Real [0.000000, 1.000000])
(declare-fun c1_0 () Real [0.000000, 1.000000])
(declare-fun X () Real [0.000000, 10.000000])
(declare-fun k_1_0_0 () Real [0.000000, 1.000000])
(declare-fun k_1_0_t () Real [0.000000, 1.000000])
(declare-fun c1_1_0_0 () Real [0.000000, 1.000000])
(declare-fun c1_1_0_t () Real [0.000000, 1.000000])
(declare-fun c1_0_0_0 () Real [0.000000, 1.000000])
(declare-fun c1_0_0_t () Real [0.000000, 1.000000])
(declare-fun X_0_0 () Real [0.000000, 10.000000])
(declare-fun X_0_t () Real [0.000000, 10.000000])
(declare-fun time_0 () Real [0.000000, 1.000000])
(declare-fun mode_0 () Real [1.000000, 1.000000])
(define-ode flow_1 ((= d/dt[X] (* 1 (* (* X k_1) (- c1_1 1)))) (= d/dt[c1_0] 0) (= d/dt[c1_1] 0) (= d/dt[k_1] 0)))
(assert (and (and (= X_0_0 1) (or (and (= c1_1_0_0 1) (= c1_0_0_0 0)) (and (= c1_1_0_0 0) (= c1_0_0_0 1))) (or (= 0 1) (<= (+ (* 5 c1_1_0_0) 9) 100))) (= mode_0 1) (= k_1_0_t (+ k_1_0_0 (* 0 time_0))) (= c1_1_0_t (+ c1_1_0_0 (* 0 time_0))) (= c1_0_0_t (+ c1_0_0_0 (* 0 time_0))) (= [X_0_t c1_0_0_t c1_1_0_t k_1_0_t] (integral 0. time_0 [X_0_0 c1_0_0_0 c1_1_0_0 k_1_0_0] flow_1)) (= mode_0 1) (= mode_0 1) (> time_0_t 0.80000000000000004) (> X_0_t 0.80000000000000004)))
(check-sat)
(exit)
